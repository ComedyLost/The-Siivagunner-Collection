import funkin.play.PlayState;
import funkin.play.event.SongEvent;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import funkin.modding.module.Module;
import funkin.Preferences;
import funkin.ui.options.FunkinSoundTray;
import funkin.Paths;
import flixel.FlxG;
import openfl.Lib;
import openfl.display.Bitmap;
import openfl.display.BitmapData;
import openfl.display.Sprite;
import openfl.text.TextField;
import openfl.text.TextFormat;
import flixel.system.FlxAssets;

class DefaultSoundTray extends Module
{
	public function new(){
		super('DefaultSoundTray');

		if (FlxG.onMobile) active = false; // Disable on mobile since mobile doesn't have a sound tray
	}

	var _label:TextField;
	
	var _bg:Bitmap;
	
	/**
	 * Helps us auto-hide the sound tray after a volume change.
	 */
	var _timer:Float;

	/**
	 * Helps display the volume bars on the sound tray.
	 */
	var _bars:Array<Bitmap>;
	
	/**
	 * The minimum width of the sound tray
	 */
	var _minWidth:Int = 80;

	var _defaultScale:Float = 2.0;

	//Bring back the classic cuz I am evil >:)
	override function onCreate(event:ScriptEvent)
	{
		super.onCreate(event);
		FlxG.sound.soundTray.volumeUpSound = FlxG.sound.soundTray.volumeDownSound = FlxG.sound.soundTray.volumeMaxSound = Paths.sound("soundtray/beep");
		FlxG.sound.soundTray.removeChildren();
		scaleX = _defaultScale;
		scaleY = _defaultScale;
		_bg = new Bitmap(new BitmapData(_minWidth, 30, true, 0x7F000000));
		FlxG.sound.soundTray.screenCenter();
		FlxG.sound.soundTray.addChild(_bg);

		_label = new TextField();
		_label.width = _bg.width;
		// text.height = bg.height;
		_label.multiline = true;
		// text.wordWrap = true;
		_label.selectable = false;

		var dtf:TextFormat = new TextFormat(FlxAssets.FONT_DEFAULT, 10, 0xffffff);
		dtf.align = 'CENTER';
		_label.defaultTextFormat = dtf;
		FlxG.sound.soundTray.addChild(_label);
		_label.text = "VOLUME";
		_label.y = 16;
		_label.x += (_label.textWidth / 2) - 10;


		FlxG.sound.soundTray._bars = [];

		var tmp:Bitmap;
		for (i in 0...10)
		{
			tmp = new Bitmap(new BitmapData(4, i + 1, false, 0xFFFFFFFF));
			FlxG.sound.soundTray.addChild(tmp);
			FlxG.sound.soundTray._bars.push(tmp);
		}
		updateSize();
		FlxG.sound.soundTray.y = -FlxG.sound.soundTray.height;
		FlxG.sound.soundTray.visible = false;

		FlxG.sound.soundTray.screenCenter();
	}

	function updateSize() {
		if (_label.textWidth + 10 > _bg.width)
			_label.width = _label.textWidth + 10;
			
		_bg.width = _label.textWidth + 10 > _minWidth ? _label.textWidth + 10 : _minWidth;
		
		_label.width = _bg.width;
		
		var bx:Int = Std.int(_bg.width / 2 - 30);
		var by:Int = 14;
		for (i in 0...FlxG.sound.soundTray._bars.length)
		{
			FlxG.sound.soundTray._bars[i].x = bx;
			FlxG.sound.soundTray._bars[i].y = by;
			bx += 6;
			by--;
		}
		FlxG.sound.soundTray.screenCenter();
	}

}